(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{339:function(t,e,a){"use strict";a.r(e);var r=a(2),c=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"git-cherry-pick-备忘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick-备忘"}},[t._v("#")]),t._v(" git cherry-pick 备忘")]),t._v(" "),a("h3",{attrs:{id:"基本用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本用法"}},[t._v("#")]),t._v(" 基本用法")]),t._v(" "),a("p",[a("code",[t._v("git cherry-pick")]),t._v(" 命令的作用，就是将指定的提交（commit）应用于其他分支。")]),t._v(" "),a("p",[a("code",[t._v("git cherry-pick <commitHash>")]),t._v(" 会将指定的提交commitHash，应用于当前分支。这会在当前分支产生一个新的提交，它们的哈希值会不一样。")]),t._v(" "),a("p",[t._v("举例来说，代码仓库有master和feature两个分支。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a - b - c - d   Master\n         \\\n           e - f - g Feature\n")])])]),a("p",[t._v("现在将提交 "),a("code",[t._v("f")]),t._v(" 应用到 "),a("code",[t._v("master")]),t._v(" 分支:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout master # 切换到 master 分支\n\ngit cherry-pick f # Cherry pick 操作\n")])])]),a("p",[t._v("上面的操作完成以后，代码库就变成了下面:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a - b - c - d - f   Master\n         \\\n           e - f - g    Feature\n")])])]),a("p",[a("code",[t._v("git cherry-pick")]),t._v(" 命令的参数，不一定是提交的哈希值，分支名也是可以的: "),a("code",[t._v("git cherry-pick feature")]),t._v(" 表示将 "),a("code",[t._v("feature")]),t._v(" 分支的最近一次提交，转移到当前分支。")]),t._v(" "),a("h3",{attrs:{id:"需求场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#需求场景"}},[t._v("#")]),t._v(" 需求场景")]),t._v(" "),a("p",[t._v("假如存在并行开发的需求，A需求开发（ "),a("code",[t._v("feat-a")]),t._v(" ）了一段时间，后续接入B需求 ( "),a("code",[t._v("feat-b")]),t._v(" )，上线时间节点不能确定先后，可能A先上也可能B先上。但是 "),a("code",[t._v("feat-b")]),t._v(" 需要复用 "),a("code",[t._v("feat-a")]),t._v(" 的某几次提交，手动复制粘贴文件的话错误率有点高，这时可以考虑使用 "),a("code",[t._v("cherry-pick")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果一次提交一股脑的改动都在一个commit里面就复杂了，所以说平时要保持良好的 commit 习惯。按"),a("strong",[t._v("需")]),t._v("提交，而不是按次提交。")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a - b - c   Master\n        |    \\\n         \\     g - h      feat-b\n          \\  \n           d - e - f      feat-a\n")])])]),a("p",[t._v("现在想要把 "),a("code",[t._v("feat-a")]),t._v(" 的 "),a("code",[t._v("e")]),t._v(" commit改动应用到 "),a("code",[t._v("feat-b")]),t._v(" 中")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git checkout feat-b\ngit cherry-pick e       #e 的commit hash\n")])])]),a("p",[t._v("然后 "),a("code",[t._v("feat-b")]),t._v(" 后面会追加一条 "),a("code",[t._v("feat-a / e")]),t._v(" 的改动")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("    a - b - c   Master\n        |    \\\n         \\     g - h - e     feat-b\n          \\  \n           d - e - f         feat-a\n")])])]),a("h3",{attrs:{id:"转移多个提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转移多个提交"}},[t._v("#")]),t._v(" 转移多个提交")]),t._v(" "),a("h4",{attrs:{id:"指定的多个commit转移"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指定的多个commit转移"}},[t._v("#")]),t._v(" 指定的多个commit转移")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git cherry-pick <HashA> <HashB>\n")])])]),a("p",[t._v("将 A 和 B 两个提交应用到当前分支。这会在当前分支生成两个对应的新提交。")]),t._v(" "),a("h3",{attrs:{id:"转移连续的commit提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转移连续的commit提交"}},[t._v("#")]),t._v(" 转移连续的commit提交")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git cherry-pick A..B\n")])])]),a("p",[t._v("可以转移从 A 到 B 的所有提交。它们必须按照正确的顺序放置："),a("strong",[t._v("提交 A 必须早于提交 B")]),t._v("，否则命令将失败，但不会报错")]),t._v(" "),a("blockquote",[a("p",[t._v("注意，使用上面的命令，提交 A 将不会包含在 Cherry pick 中。如果要包含提交 A，可以使用\n"),a("code",[t._v("git cherry-pick A^..B")])])]),t._v(" "),a("h3",{attrs:{id:"指令参数-options"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#指令参数-options"}},[t._v("#")]),t._v(" 指令参数 -options")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("-e，--edit")])])]),t._v(" "),a("p",[t._v("打开外部编辑器，编辑提交信息。")]),t._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[t._v("-n，--no-commit")])])]),t._v(" "),a("p",[t._v("只更新工作区和暂存区，不产生新的提交")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("-x")])])]),t._v(" "),a("p",[t._v("在提交信息的末尾追加一行(cherry picked from commit ...)，方便以后查到这个提交是如何产生的。")]),t._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[a("code",[t._v("-s，--signoff")])])]),t._v(" "),a("p",[t._v("在提交信息的末尾追加一行操作者的签名，表示是谁进行了这个操作。")]),t._v(" "),a("ol",{attrs:{start:"5"}},[a("li",[a("code",[t._v("-m parent-number，--mainline parent-number")])])]),t._v(" "),a("p",[t._v("如果原始提交是一个合并节点，来自于两个分支的合并，那么 Cherry pick 默认将失败，因为它不知道应该采用哪个分支的代码变动。")]),t._v(" "),a("blockquote",[a("p",[t._v("-m 配置项告诉 Git，应该采用哪个分支的变动。它的参数parent-number是一个从1开始的整数，代表原始提交的父分支编号。")]),t._v(" "),a("p",[t._v("比如 "),a("code",[t._v("git cherry-pick -m 1 <commitHash>")]),t._v(" 命令表示，Cherry pick 采用提交commitHash来自编号1的父分支的变动。")]),t._v(" "),a("p",[t._v("一般来说，1号父分支是接受变动的分支（the branch being merged into），2号父分支是作为变动来源的分支（the branch being merged from）。")])]),t._v(" "),a("h3",{attrs:{id:"代码冲突"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码冲突"}},[t._v("#")]),t._v(" 代码冲突")]),t._v(" "),a("p",[t._v("如果操作过程中发生代码冲突，Cherry pick 会停下来，让用户决定如何继续操作")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("--continue")]),t._v("\n用户解决代码冲突后:")]),t._v(" "),a("ul",[a("li",[t._v("第一步将修改的文件重新加入暂存区 "),a("code",[t._v("git add .")])]),t._v(" "),a("li",[t._v("第二步使用 "),a("code",[t._v("git cherry-pick --continue")]),t._v("，让 Cherry pick 过程继续执行")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("--abort")])])])]),t._v(" "),a("p",[t._v("稳妥之举~~。发生代码冲突后，放弃合并，回到操作前的样子。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[a("code",[t._v("--quit")])])]),t._v(" "),a("p",[t._v("发生代码冲突后，退出 Cherry pick，但是不回到操作前的样子")]),t._v(" "),a("h3",{attrs:{id:"转移另一个仓库的提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#转移另一个仓库的提交"}},[t._v("#")]),t._v(" 转移另一个仓库的提交")]),t._v(" "),a("ul",[a("li",[t._v("前提是先把目标的仓库添加到当前的远程仓库："),a("code",[t._v("git remote add target git://gitUrl")])]),t._v(" "),a("li",[t._v("然后，将远程代码抓取到本地 "),a("code",[t._v("git fetch target")])]),t._v(" "),a("li",[t._v("检查一下要从远程仓库转移的提交，获取它的哈希值 "),a("code",[t._v("git log target/master")])]),t._v(" "),a("li",[t._v("使用git cherry-pick 命令转移提交 "),a("code",[t._v("git cherry-pick <commitHash>")])])]),t._v(" "),a("p",[t._v("趁着今天有类似的场景，终于照着阮老师的"),a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2020/04/git-cherry-pick.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("教程"),a("OutboundLink")],1),t._v("把心心念念很久又没有实践的 "),a("code",[t._v("cherry-pick")]),t._v(" 实践了一遍")])])}),[],!1,null,null,null);e.default=c.exports}}]);