(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{305:function(t,v,_){t.exports=_.p+"assets/img/chmod.6f714df0.png"},352:function(t,v,_){"use strict";_.r(v);var a=_(2),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"系统目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统目录"}},[t._v("#")]),t._v(" 系统目录")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("目录")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("/bin")]),t._v(" "),a("td",[t._v('基本系统所需要的命令,功能和"/usr/bin"类似,这个目录下的文件都是可执行的.普通用户也是可以执行的.')])]),t._v(" "),a("tr",[a("td",[t._v("/usr")]),t._v(" "),a("td",[t._v("存放用户使用系统命令和应用程序等信息.像命令.帮助文件等.")])]),t._v(" "),a("tr",[a("td",[t._v("/sbin")]),t._v(" "),a("td",[t._v("基本的系统维护命令,只能由超级用户使用.")])]),t._v(" "),a("tr",[a("td",[t._v("/home")]),t._v(" "),a("td",[t._v("普通用户的目录默认存储目录.")])]),t._v(" "),a("tr",[a("td",[t._v("/etc")]),t._v(" "),a("td",[t._v("所有的系统配置文件.")])]),t._v(" "),a("tr",[a("td",[t._v("/boot")]),t._v(" "),a("td",[t._v("内核和加载内核所需要的文件.grub系统引导管理器也在这个目录下.")])]),t._v(" "),a("tr",[a("td",[t._v("/dev")]),t._v(" "),a("td",[t._v("设备文件存储目录.像终端.磁盘等.")])]),t._v(" "),a("tr",[a("td",[t._v("/lib")]),t._v(" "),a("td",[t._v("库文件和内核模块存放目录.")])]),t._v(" "),a("tr",[a("td",[t._v("/proc")]),t._v(" "),a("td",[t._v("虚拟的目录，是系统内存的映射。可直接访问这个目录来获取系统信息。")])]),t._v(" "),a("tr",[a("td",[t._v("/opt")]),t._v(" "),a("td",[t._v("第三方软件的存放目录.")])]),t._v(" "),a("tr",[a("td",[t._v("/var")]),t._v(" "),a("td",[t._v("存放经常变动的数据,像日志.邮件等.")])]),t._v(" "),a("tr",[a("td",[t._v("/mnt")]),t._v(" "),a("td",[t._v("临时文件系统的挂载点目录.")])]),t._v(" "),a("tr",[a("td",[t._v("/tmp")]),t._v(" "),a("td",[t._v("临时文件目录.")])]),t._v(" "),a("tr",[a("td",[t._v("/media")]),t._v(" "),a("td",[t._v("即插即用设备的挂载点自动存放在这个目录下.像U盘,cdrom/dvd自动挂载后,就会在这个目录下.")])]),t._v(" "),a("tr",[a("td",[t._v("/srv")]),t._v(" "),a("td",[t._v("存放一些服务器启动之后需要提取的数据.")])]),t._v(" "),a("tr",[a("td",[t._v("/root")]),t._v(" "),a("td",[t._v("Linux超级权限用户root的跟目录.")])])])]),t._v(" "),a("h2",{attrs:{id:"用户权限"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户权限"}},[t._v("#")]),t._v(" 用户权限")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("sudo 指令")]),t._v(" "),a("td",[t._v("用 root 身份执行某条命令")])]),t._v(" "),a("tr",[a("td",[t._v("useradd xixi")]),t._v(" "),a("td",[t._v("创建一个用户")])]),t._v(" "),a("tr",[a("td",[t._v("passwd xixi")]),t._v(" "),a("td",[t._v("修改用户的登陆密码")])]),t._v(" "),a("tr",[a("td",[t._v("userdel xixi")]),t._v(" "),a("td",[t._v("删除用户")])]),t._v(" "),a("tr",[a("td",[t._v("su 用户名")]),t._v(" "),a("td",[t._v("用户切换(su是switch user的缩写)")])]),t._v(" "),a("tr",[a("td",[t._v("groupadd 组名")]),t._v(" "),a("td",[t._v("添加用户组（控制多用户权限）")])]),t._v(" "),a("tr",[a("td",[t._v("groupdel 组名")]),t._v(" "),a("td",[t._v("删除用户组")])]),t._v(" "),a("tr",[a("td",[t._v("usermod")]),t._v(" "),a("td",[t._v("修改用户信息（添加到组等...）")])]),t._v(" "),a("tr",[a("td",[t._v("groups 用户名")]),t._v(" "),a("td",[t._v("查看用户属于哪些组")])]),t._v(" "),a("tr",[a("td",[t._v("usermod -a -G 组名 用户名")]),t._v(" "),a("td",[t._v("修改用户信息（添加到组等...）")])]),t._v(" "),a("tr",[a("td",[t._v("/etc/passwd")]),t._v(" "),a("td",[t._v("用户信息配置文件")])]),t._v(" "),a("tr",[a("td",[t._v("/etc/group")]),t._v(" "),a("td",[t._v("用户组信息")])]),t._v(" "),a("tr",[a("td",[t._v("/etc/shadow")]),t._v(" "),a("td",[t._v("用户密码信息配置文件")])])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("usermod")]),t._v(" -a -G fe root // 添加用户root 到fe组中\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("groups")]),t._v(" root\nroot "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(":")]),t._v(" root fe // 查到现在有新增组\n")])])]),a("blockquote",[a("p",[t._v("将一个用户添加到用户组中，千万不能直接用 usermod -G groupA。这样做会使你离开其他用户组，仅仅做为 这个用户组 groupA 的成员。应该用 加上 -a 选项")])]),t._v(" "),a("h2",{attrs:{id:"文件操作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文件操作"}},[t._v("#")]),t._v(" 文件操作")]),t._v(" "),a("p",[t._v("Linux 一切皆文件，文件管理")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("ls")]),t._v(" "),a("td",[t._v("列出目录")])]),t._v(" "),a("tr",[a("td",[t._v("cd")]),t._v(" "),a("td",[t._v("切换目录")])]),t._v(" "),a("tr",[a("td",[t._v("pwd")]),t._v(" "),a("td",[t._v("显示目前的目录")])]),t._v(" "),a("tr",[a("td",[t._v("touch file")]),t._v(" "),a("td",[t._v("创建文件")])]),t._v(" "),a("tr",[a("td",[t._v("mkdir 目录")]),t._v(" "),a("td",[t._v("创建一个新的目录,"),a("code",[t._v("mkdir -p A/B")]),t._v("(若A不存在先创建A再创建B)")])]),t._v(" "),a("tr",[a("td",[t._v("rmdir 目录")]),t._v(" "),a("td",[t._v("删除一个空的目录")])]),t._v(" "),a("tr",[a("td",[t._v("cp")]),t._v(" "),a("td",[t._v("复制文件或目录")])]),t._v(" "),a("tr",[a("td",[t._v("rm")]),t._v(" "),a("td",[t._v("移除文件或目录")])]),t._v(" "),a("tr",[a("td",[t._v("mv")]),t._v(" "),a("td",[t._v("移动文件与目录，或修改文件与目录的名称")])]),t._v(" "),a("tr",[a("td",[t._v("ln -s 源 target")]),t._v(" "),a("td",[t._v("创建软链接 "),a("code",[t._v("ln -s /usr/local/lib/node-v11.13.0/bin/npm /usr/local/bin/")]),t._v(" 配置npm软链接")])])])]),t._v(" "),a("p",[a("strong",[t._v("ls（列出目录）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ls")]),t._v(" -al  // 将用户目录下的所有文件列出来"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("含属性与隐藏档"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  centOS可以执行 ll 作用相同\n-a ：全部的文件，连同隐藏档"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" 开头为 "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" 的文件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 一起列出来"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("常用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-d ：仅列出目录本身，而不是列出目录内的文件数据"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("常用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n-l ：长数据串列出，包含文件的属性与权限等等数据；"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("常用"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("rm（删除）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -f "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" // 删除某个文件\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("rm")]),t._v(" -rf filer  // 删除目录 -r向下删除递归，-f直接删除无提示\n")])])]),a("p",[a("strong",[t._v("cp（复制）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("-f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("file")]),t._v(" A  复制file文件到A目录下\n-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。\n-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。\n-f：覆盖已经存在的目标文件而不给出提示。\n-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"y"')]),t._v("时目标文件将被覆盖。\n-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。\n-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。\n-l：不复制文件，只是生成链接文件。\n\n如果备份目录envbak不存在，则可以直接使用\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" -r "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("env")]),t._v(" envbak\n如果目标备份dir2目录已存在，则需要使用\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" -r dir1/. dir2\n")])])]),a("p",[a("strong",[t._v("mv（移动）")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" /home/.bashrc bashrc //将home下的bashrc复制到当前目录中\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mkdir")]),t._v(" mvtest // 创建一个目录\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" bashrc mvtest // 将新复制的bashrc复制到mvtest目录中\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" bashrc mvtest // 将新复制的bashrc复制到mvtest目录中\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("mv")]),t._v(" mvtest mvtest2 // 目录mvtest 更名为 mvtest2\n")])])]),a("p",[a("strong",[t._v("内容查看")])]),t._v(" "),a("ul",[a("li",[t._v("cat  由第一行开始显示文件内容")]),t._v(" "),a("li",[t._v("tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！")]),t._v(" "),a("li",[t._v("nl   显示的时候，顺道输出行号！")]),t._v(" "),a("li",[t._v("more 一页一页的显示文件内容")]),t._v(" "),a("li",[t._v("less 与 more 类似，但是比 more 更好的是，他可以往前翻页！")]),t._v(" "),a("li",[t._v("head 只看头几行")]),t._v(" "),a("li",[t._v("tail 只看末尾几行 "),a("code",[t._v("tail [-n number] 文件")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cat")]),t._v(" package.json\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tail")]),t._v(" -n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" npm.log "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看最近的10条日志")]),t._v("\n")])])]),a("h2",{attrs:{id:"chmod命令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#chmod命令"}},[t._v("#")]),t._v(" chmod命令")]),t._v(" "),a("p",[t._v("Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。比如新建一个.sh脚本，提示无法执行。可能是因为权限不足导致的。")]),t._v(" "),a("p",[t._v("语法："),a("code",[t._v("chmod [-cfvR] [--help] [--version] mode file")])]),t._v(" "),a("ul",[a("li",[t._v("文件权限\n"),a("ul",[a("li",[t._v("r 读权限 4")]),t._v(" "),a("li",[t._v("w 写权限 2")]),t._v(" "),a("li",[t._v("x 执行权限 1")])])]),t._v(" "),a("li",[t._v("目录权限\n"),a("ul",[a("li",[t._v("rx 进入目录读取文件名")]),t._v(" "),a("li",[t._v("wx 修改目录内文件名")]),t._v(" "),a("li",[t._v("x 进入目录")])])]),t._v(" "),a("li",[t._v("角色权限\n"),a("ul",[a("li",[t._v("a  all--所有用户")]),t._v(" "),a("li",[t._v("u  user----文件拥有着")]),t._v(" "),a("li",[t._v("g  group----与user同属一个group的其他user")]),t._v(" "),a("li",[t._v("o  other-----其他group的user")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:_(305),alt:"权限"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("将文件 file1.txt 设为所有人皆可读取")]),t._v(" "),a("td",[t._v("chmod ugo+r file1.txt      / chmod a+r file1.txt")])]),t._v(" "),a("tr",[a("td",[t._v("将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入")]),t._v(" "),a("td",[t._v("chmod ug+w,o-w file1.txt file2.txt")])]),t._v(" "),a("tr",[a("td",[t._v("将 ex1.py 设定为只有该文件拥有者可以执行")]),t._v(" "),a("td",[t._v("chmod u+x ex1.py")])]),t._v(" "),a("tr",[a("td",[t._v("将目前目录下的所有文件与子目录皆设为任何人可读取")]),t._v(" "),a("td",[t._v("chmod -R a+r *     / chmod 777 file")])])])]),t._v(" "),a("blockquote",[a("p",[t._v("chmod 777 file  语法为：chmod abc file\n其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。\nr=4，w=2，x=1")]),t._v(" "),a("ul",[a("li",[t._v("若要rwx属性则4+2+1=7；")]),t._v(" "),a("li",[t._v("若要rw-属性则4+2=6；")]),t._v(" "),a("li",[t._v("若要r-x属性则4+1=5。\nchmod a=rwx file 等同于 chmod 777 file\nchmod ug=rwx,o=x file 等同于 chmod 771 file\n若用chmod 4755 filename可使此程序具有root的权限")])])]),t._v(" "),a("p",[t._v("常用形式：")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" +x filename // 使文件可执行\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),t._v(" ./deploye.sh  // 将deploye.sh设为任何人可读,写,执行\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("777")]),t._v(" /project/  // 将目录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("即/project"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("设为任何人可读,写,执行\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("755")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" 意思是 u的权限是4+2+1、 g和o的权限是4+1, -rwxr-xr-x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("在首位-代表普通文件，d代表目录"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("directory"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，l代表链接"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("link"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，b代表区块"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("block"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("，c代表"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("character"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" a+x  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("chmod")]),t._v(" u+r  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("filename"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])]),a("h2",{attrs:{id:"打包压缩"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#打包压缩"}},[t._v("#")]),t._v(" 打包压缩")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(".tar\n　　解包：tar xvf FileName.tar\n　　打包：tar cvf FileName.tar DirName // 将整个 /DirName 目录下的文件全部打包成为 FileName.tar\n　　（注：tar是打包，不是压缩！）\n　　———————————————\n.gz\n　　解压1：gunzip FileName.gz\n　　解压2：gzip -d FileName.gz\n　　压缩：gzip FileName\n.tar.gz 和 .tgz\n　　解压：tar zxvf FileName.tar.gz\n　　压缩：tar zcvf FileName.tar.gz DirName\n　　———————————————\n.bz2\n　　解压1：bzip2 -d FileName.bz2\n　　解压2：bunzip2 FileName.bz2\n　　压缩： "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bzip2")]),t._v(" -z FileName\n.tar.bz2\n　　解压：tar jxvf FileName.tar.bz2 或tar –bzip xvf FileName.tar.bz2\n　　压缩：tar jcvf FileName.tar.bz2 DirName\n　　———————————————\n.bz\n　　解压1：bzip2 -d FileName.bz\n　　解压2：bunzip2 FileName.bz\n　　压缩：未知\n.tar.bz\n　　解压：tar jxvf FileName.tar.bz\n　　压缩：未知\n　　———————————————\n.Z\n　　解压：uncompress FileName.Z\n　　压缩：compress FileName\n.tar.Z\n　　解压：tar Zxvf FileName.tar.Z\n　　压缩：tar Zcvf FileName.tar.Z DirName\n　　———————————————\n.zip\n　　解压：unzip FileName.zip\n　　压缩：zip FileName.zip DirName\n　　压缩一个目录使用 -r 参数，-r 递归。例： $ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("zip")]),t._v(" -r FileName.zip DirName\n　　———————————————\n.rar\n　　解压：rar x FileName.rar\n　　压缩：rar a FileName.rar DirName\n")])])]),a("h2",{attrs:{id:"查找"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查找"}},[t._v("#")]),t._v(" 查找")]),t._v(" "),a("p",[a("strong",[t._v("grep")]),t._v("\n查找文件里符合条件的字符串\n如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 -，则 grep 指令会从当前设备（系统环境）读取数据。")]),t._v(" "),a("ol",[a("li",[t._v("在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令："),a("code",[t._v("grep test *file")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" test* "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#查找前缀有“test”的文件包含“test”字符串的文件  ")]),t._v("\ntestfile1:This a Linux testfile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#列出testfile1 文件中包含test字符的行  ")]),t._v("\ntestfile_2:This is a linux testfile"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#列出testfile_2 文件中包含test字符的行  ")]),t._v("\ntestfile_2:Linux "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("test")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#列出testfile_2 文件中包含test字符的行 ")]),t._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v('以递归的方式查找符合条件的文件。例如，查找指定目录/home/www 及其子目录（如果存在子目录的话）下所有文件中包含字符串"foo"的文件，并打印出该字符串所在行的内容，使用的命令为：'),a("code",[t._v("grep -r foo /home/www")])])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" -r foo /home/www "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#以递归的方式查找“/home/www”  ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#下包含“foo”的文件  ")]),t._v("\na.sh:foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a来的"')]),t._v("\nb.sh:echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"文件a的变量：'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v('"')]),t._v("\nwt.sh:foo"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("justwe\nwt.sh:echo foo\nwt.sh:echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出变量：foo"')]),t._v("\nwt.sh:echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'输出变量："),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v("'")]),t._v("\nwt.sh:echo "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"输出变量：'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$foo")]),t._v('"')]),t._v("\nwt.sh:"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# echo `输出日期：$foo` # 这条指令不能正常执行")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[a("p",[t._v('反向查找。前面各个例子是查找并打印出符合条件的行，通过"-v"参数可以打印出不符合条件行的内容。\n查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：'),a("code",[t._v("grep -v test *test*")])])]),t._v(" "),a("li",[a("p",[t._v("查看端口占用：\n"),a("code",[t._v("netstat -anp |grep 端口号")])])])]),t._v(" "),a("p",[a("strong",[t._v("find")])]),t._v(" "),a("p",[t._v("find是最常见和最强大的查找命令，你可以用它找到任何你想找的文件。")]),t._v(" "),a("p",[t._v("find的使用格式如下：")]),t._v(" "),a("p",[a("code",[t._v("find <指定目录> <指定条件> <指定动作>")])]),t._v(" "),a("ul",[a("li",[t._v("<指定目录>： 所要搜索的目录及其所有子目录。默认为当前目录。")]),t._v(" "),a("li",[t._v("<指定条件>： 所要搜索的文件的特征。")]),t._v(" "),a("li",[t._v("<指定动作>： 对搜索结果进行特定的处理。")])]),t._v(" "),a("p",[t._v("如果什么参数也不加，find默认搜索当前目录及其子目录，并且不过滤任何结果（也就是返回所有文件），将它们全都显示在屏幕上。")]),t._v(" "),a("p",[t._v("find的使用实例：")]),t._v(" "),a("p",[a("code",[t._v("find . -name 'my*'")]),t._v("\n搜索当前目录（含子目录，以下同）中，所有文件名以my开头的文件。\n"),a("code",[t._v("find . -name 'my*' -ls")]),t._v("\n搜索当前目录中，所有文件名以my开头的文件，并显示它们的详细信息。\n"),a("code",[t._v("find . -type f -mmin -10")]),t._v("\n搜索当前目录中，所有过去10分钟中更新过的普通文件。如果不加-type f参数，则搜索普通文件+特殊文件+目录。")]),t._v(" "),a("p",[a("strong",[t._v("locate")]),a("br"),t._v(" "),a("code",[t._v("locate")]),t._v(" 命令其实是 "),a("code",[t._v("find -name")]),t._v(" 的另一种写法，但是要比后者快得多，原因在于它不搜索具体目录，而是搜索一个数据库（/var/lib/locatedb），这个数据库中含有本地所有文件信息。Linux系统自动创建这个数据库，并且每天自动更新一次，所以使用locate命令查不到最新变动过的文件。为了避免这种情况，可以在使用 "),a("code",[t._v("locate")]),t._v(" 之前，先使用 "),a("code",[t._v("updatedb")]),t._v(" 命令，手动更新数据库。")]),t._v(" "),a("p",[a("strong",[t._v("locate")]),a("br"),t._v("\nlocate命令的使用实例：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("locate /etc/sh")])]),t._v(" "),a("td",[t._v("搜索etc目录下所有以sh开头的文件")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("locate ~/m")])]),t._v(" "),a("td",[t._v("搜索用户主目录下，所有以m开头的文件。")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("locate -i ~/m")])]),t._v(" "),a("td",[t._v("搜索用户主目录下，所有以m开头的文件，并且忽略大小写。")])])])]),t._v(" "),a("p",[a("strong",[t._v("whereis")]),a("br"),t._v("\nwhereis命令只能用于"),a("strong",[t._v("程序名")]),t._v("的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。"),a("br"),t._v(" "),a("code",[t._v("whereis grep")])]),t._v(" "),a("p",[a("strong",[t._v("which")]),a("br"),t._v("\nwhich命令的作用是，在PATH变量指定的路径中，搜索某个系统命令的位置，并且返回第一个搜索结果。也就是说，使用which命令，就可以看到某个系统命令是否存在，以及执行的到底是哪一个位置的命令。"),a("br"),t._v(" "),a("code",[t._v("which grep")])]),t._v(" "),a("p",[a("strong",[t._v("type")]),a("br"),t._v("\ntype命令其实不能算查找命令，它是用来区分某个命令到底是由shell自带的，还是由shell外部的独立二进制文件提供的。如果一个命令是外部命令，那么使用-p参数，会显示该命令的路径，相当于which命令。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("code",[t._v("type cd")])]),t._v(" "),a("td",[t._v("系统会提示，cd是shell的自带命令（build-in）")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("type grep")])]),t._v(" "),a("td",[t._v("系统会提示，grep是一个外部命令，并显示该命令的路径")])]),t._v(" "),a("tr",[a("td",[a("code",[t._v("type -p grep")])]),t._v(" "),a("td",[t._v("加上-p参数后，就相当于which命令")])])])]),t._v(" "),a("h2",{attrs:{id:"查看内存使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看内存使用"}},[t._v("#")]),t._v(" 查看内存使用")]),t._v(" "),a("p",[a("strong",[t._v("ps")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" -ef \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" –ef "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("grep")]),t._v(" python "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#（常用）查询 python 进程，grep -> 筛选")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" aux: 按照 pid 显示内容 （默认排序方式）\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ps")]),t._v(" aux --sort -rss: 按照 rss 排序显示内容\n")])])]),a("p",[a("strong",[t._v("top")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("key")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("PID")]),t._v(" "),a("td",[t._v("进程的ID")])]),t._v(" "),a("tr",[a("td",[t._v("USER")]),t._v(" "),a("td",[t._v("进程所有者")])]),t._v(" "),a("tr",[a("td",[t._v("PR")]),t._v(" "),a("td",[t._v("进程的优先级别，越小越优先被执行")])]),t._v(" "),a("tr",[a("td",[t._v("NI")]),t._v(" "),a("td",[t._v("进程Nice值，代表这个进程的优先值")])]),t._v(" "),a("tr",[a("td",[t._v("VIRT")]),t._v(" "),a("td",[t._v("进程占用的虚拟内存")])]),t._v(" "),a("tr",[a("td",[t._v("RES")]),t._v(" "),a("td",[t._v("进程占用的物理内存")])]),t._v(" "),a("tr",[a("td",[t._v("SHR")]),t._v(" "),a("td",[t._v("进程使用的共享内存")])]),t._v(" "),a("tr",[a("td",[t._v("S")]),t._v(" "),a("td",[t._v("进程的状态。S表示休眠，R表示正在运行，Z表示僵死状态")])]),t._v(" "),a("tr",[a("td",[t._v("%CPU")]),t._v(" "),a("td",[t._v("进程占用CPU的使用")])]),t._v(" "),a("tr",[a("td",[t._v("%MEM")]),t._v(" "),a("td",[t._v("进程使用的物理内存和总内存的百分")])]),t._v(" "),a("tr",[a("td",[t._v("TIME+")]),t._v(" "),a("td",[t._v("该进程启动后占用的总的CPU时间，即占用CPU使用时间的累加值")])]),t._v(" "),a("tr",[a("td",[t._v("COMMAND")]),t._v(" "),a("td",[t._v("启动该进程的命令名称")])])])]),t._v(" "),a("p",[a("strong",[t._v("free命令：")])]),t._v(" "),a("p",[a("code",[t._v("free")]),t._v(": 用KB为单位展示数据")]),t._v(" "),a("p",[a("code",[t._v("free -m")]),t._v(": 用MB为单位展示数据")]),t._v(" "),a("p",[a("code",[t._v("free -h")]),t._v(": 用GB为单位展示数据")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("key")]),t._v(" "),a("th",[t._v("含义")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("total")]),t._v(" "),a("td",[t._v("总计屋里内存的大小")])]),t._v(" "),a("tr",[a("td",[t._v("used")]),t._v(" "),a("td",[t._v("已使用内存的大小")])]),t._v(" "),a("tr",[a("td",[t._v("free")]),t._v(" "),a("td",[t._v("可用内存的大小")])]),t._v(" "),a("tr",[a("td",[t._v("shared")]),t._v(" "),a("td",[t._v("多个进程共享的内存总额")])]),t._v(" "),a("tr",[a("td",[t._v("buff/cache")]),t._v(" "),a("td",[t._v("磁盘缓存大小")])]),t._v(" "),a("tr",[a("td",[t._v("available")]),t._v(" "),a("td",[t._v("可用内存大小 ， 从应用程序的角度来说：available = free + buff/cache .")])])])]),t._v(" "),a("p",[a("strong",[t._v("cat /proc/meminfo 命令")])]),t._v(" "),a("p",[t._v("这是用来查看RAM使用情况最简单的方法。 这个动态更新的虚拟文件实际上是许多其他内存相关工具的组合显示，就如上面说列的 top, free等。它列出了所有我们想了解的内存的使用情况。")]),t._v(" "),a("p",[t._v("进程的内存使用信息也可以通过： /proc//statm 和 /proc//status 来查看。")]),t._v(" "),a("p",[a("strong",[t._v("vmstat -s")])]),t._v(" "),a("h2",{attrs:{id:"查看文件夹大小，磁盘剩余空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查看文件夹大小，磁盘剩余空间"}},[t._v("#")]),t._v(" 查看文件夹大小，磁盘剩余空间")]),t._v(" "),a("blockquote",[a("p",[t._v("du查看目录大小，df查看磁盘使用情况。")])]),t._v(" "),a("p",[a("strong",[t._v("df")])]),t._v(" "),a("blockquote",[a("p",[t._v("df则是基于文件系统总体来计算，通过文件系统中未分配空间来确定系统中已经分配空间的大小。df命令可以获取硬盘占用了多少空间，还剩下多少空间，它也可以显示所有文件系统对i节点和磁盘块的使用情况。")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("指令")]),t._v(" "),a("th",[t._v("功能")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("df -hl")]),t._v(" "),a("td",[t._v("查看磁盘剩余空间")])]),t._v(" "),a("tr",[a("td",[t._v("df -h")]),t._v(" "),a("td",[t._v("查看每个根路径的分区大小")])]),t._v(" "),a("tr",[a("td",[t._v("du -sh [目录名]")]),t._v(" "),a("td",[t._v("返回该目录的大小")])]),t._v(" "),a("tr",[a("td",[t._v("du -sm [文件夹]")]),t._v(" "),a("td",[t._v("返回该文件夹总M数")])])])]),t._v(" "),a("p",[a("strong",[t._v("du")])]),t._v(" "),a("blockquote",[a("p",[t._v("du是面向文件的命令，只计算被文件占用的空间，不计算文件系统 metadata 占用的空间")])]),t._v(" "),a("h2",{attrs:{id:"管道"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#管道"}},[t._v("#")]),t._v(" 管道")]),t._v(" "),a("blockquote",[a("p",[t._v("把前一个命令的结果当成后一个命令的输入。")])]),t._v(" "),a("p",[t._v("管道是由内核管理的一个缓冲区，相当于我们放入内存中的一个纸条。管道的一端连接一个进程的输出。这个进程会向管道中放入信息。管道的另一端连接一个进程的输入，这个进程取出被放入管道的信息。一个缓冲区不需要很大，它被设计成为"),a("strong",[t._v("环形的数据结构")]),t._v("，以便管道可以被循环利用。当管道中没有信息的话，从管道中读取的进程会等待，直到另一端的进程放入信息。当管道被放满信息的时候，尝试放入信息的进程会堵塞，直到另一端的进程取出信息。当两个进程都终结的时候，管道也自动消失。")]),t._v(" "),a("ul",[a("li",[t._v("查看 a.txt 文件5-10行的内容\n"),a("code",[t._v("head -n10 a.txt | tail -n+5")])]),t._v(" "),a("li",[t._v("查询带有关键字 python 的进程\n"),a("code",[t._v("ps –ef | grep python")])])])])}),[],!1,null,null,null);v.default=s.exports}}]);