(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{234:function(t,a,e){"use strict";e.r(a);var s=e(0),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"名词解释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#名词解释"}},[t._v("#")]),t._v(" 名词解释")]),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支"}},[t._v("#")]),t._v(" 分支")]),t._v(" "),e("p",[t._v("如"),e("code",[t._v("master分支，dev分支")]),t._v("，使用分支可以把工作从开发主线上分离开来,以免影响开发主线代码")]),t._v(" "),e("h2",{attrs:{id:"本地分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#本地分支"}},[t._v("#")]),t._v(" 本地分支")]),t._v(" "),e("p",[t._v("开发者主机上基于远程分支创建，修改并不会影响远程分支的内容，执行push会与远程分支合并形成新的分支")]),t._v(" "),e("h2",{attrs:{id:"远程分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#远程分支"}},[t._v("#")]),t._v(" 远程分支")]),t._v(" "),e("p",[t._v("git仓库某个分支")]),t._v(" "),e("h2",{attrs:{id:"head"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#head"}},[t._v("#")]),t._v(" HEAD")]),t._v(" "),e("p",[t._v("HEAD指向的是现在使用中的分支的最后一次更新。通常默认指向master分支的最后一次更新。通过移动HEAD，就可以变更使用的分支。\n"),e("code",[t._v("git push origin HEAD:release 将当前工作的分支指向到release分支，无需切换合并")])]),t._v(" "),e("h2",{attrs:{id:"pull"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pull"}},[t._v("#")]),t._v(" pull")]),t._v(" "),e("ul",[e("li",[t._v("git pull <远程主机名> <远程分支名>\n当前分支是feature，但是你想把远程master”同步”到本地master，但又不想checkout切换到master分支,使用"),e("code",[t._v("git pull origin master:master")])]),t._v(" "),e("li",[t._v("git pull origin <远程主机名>\n如果当前分支与远程分支存在追踪关系,将指定远程分支同步到当前本地分支"),e("code",[t._v("git pull origin master")])]),t._v(" "),e("li",[t._v("git pull")])]),t._v(" "),e("p",[t._v('git pull --rebase origin branch\n本地分支已经和想要拉取的分支建立了“关联”关系。拉取所有远程分支的新版本"坐标"，并同步当前分支的本地代码(具体根据关联分支而定)\n什么是"关联"分支?'),e("code",[t._v("git branch -vv")]),t._v("查看分支关联\n配置关联方法")]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b dev origin/dev\n当我们检查时，git会自动为我们检出的分支和远程分支建立关联关系\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push -u origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --set-upstream origin "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n默认配置下，提交时本地分支需和远程分支同名\n"),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" branch --set-upstream-to"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("远程分支"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("h2",{attrs:{id:"push"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#push"}},[t._v("#")]),t._v(" push")]),t._v(" "),e("p",[t._v('推送本地分支到远程，与pull的可选参数基本相同\n没有"关联"分支的情况下，使用push会先让你设置一个upstream branch.')]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("指令")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git push")]),t._v(" "),e("td",[t._v("将当前已关联分支代码同步到远程同名分支")])]),t._v(" "),e("tr",[e("td",[t._v("git push origin master")]),t._v(" "),e("td",[t._v("master推送本地分支到远程master")])]),t._v(" "),e("tr",[e("td",[t._v("git push origin feature:dev")]),t._v(" "),e("td",[t._v("提交本地feature分支到远程的dev分支")])]),t._v(" "),e("tr",[e("td",[t._v("git push origin :dev")]),t._v(" "),e("td",[t._v("提交到远程的dev将被删除，但是本地还会保存")])])])]),t._v(" "),e("h2",{attrs:{id:"分支操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支操作"}},[t._v("#")]),t._v(" 分支操作")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("指令")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git branch")]),t._v(" "),e("td",[t._v("查看本地分支")])]),t._v(" "),e("tr",[e("td",[t._v("git branch -r")]),t._v(" "),e("td",[t._v("查看远程分支")])]),t._v(" "),e("tr",[e("td",[t._v("git branch -m old new")]),t._v(" "),e("td",[t._v("修改分支名")])]),t._v(" "),e("tr",[e("td",[t._v("git branch -a")]),t._v(" "),e("td",[t._v("查看所有分支")])]),t._v(" "),e("tr",[e("td",[t._v("git branch feature")]),t._v(" "),e("td",[t._v("创建本地feature分支")])]),t._v(" "),e("tr",[e("td",[t._v("git push origin feature-bug")]),t._v(" "),e("td",[t._v("创建远程feature-bug分支")])]),t._v(" "),e("tr",[e("td",[t._v("git checkout dev")]),t._v(" "),e("td",[t._v("切换到dev分支")])]),t._v(" "),e("tr",[e("td",[t._v("git merge feature")]),t._v(" "),e("td",[t._v("合并feature分支到当前分支(多出一个节点)")])]),t._v(" "),e("tr",[e("td",[t._v("git rebase feature")]),t._v(" "),e("td",[t._v("合并feature分支到当前分支(master变基到当前分支)")])])])]),t._v(" "),e("h2",{attrs:{id:"merge与rebase-合并分支"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merge与rebase-合并分支"}},[t._v("#")]),t._v(" merge与rebase(合并分支)")]),t._v(" "),e("p",[t._v("如小明与小红同时基于master分支各自创建了b-ming和b-hong分支，小明首先完成，并合并到了master分支，(假设没有代码冲突)小红之后进行push操作会提示需要先pull，之后再进行提交操作。")]),t._v(" "),e("ol",[e("li",[t._v("使用merge合并\n合并最新的master和小红的最新分支，汇入一个最新的分支指向，会多余一个合并提交的结尾")])]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("指令")]),t._v(" "),e("th",[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("git merge feature")]),t._v(" "),e("td",[t._v("只保留单条分支记录")])]),t._v(" "),e("tr",[e("td",[t._v("git merge --no-ff feature")]),t._v(" "),e("td",[t._v("保留分支的commit历史")])]),t._v(" "),e("tr",[e("td",[t._v("git merge --squash feature")]),t._v(" "),e("td",[t._v("把多次分支commit历史压缩为一次")])])])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("使用rebase\n基于小明的分支b-ming的最新mater之后添加小红的分支，并最终指向为小红的分支")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("可以在pull添加模式 "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull --rebase origin master,--rebase选项告诉Git把小红的提交移到同步了中央仓库修改后的master分支的顶部\n出现冲突\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("some-file"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --continue\n如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git pull --rebase命令前的样子：\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase --abort\n")])])]),e("p",[t._v("拉取变基\n如线上最新分支为A-B-C-D服务器为A-B-E\n需要先pull一下再push，那最终服务器上会是A-B-分叉：一边是C-D，一边是E，然后E和D又连到一个新的merge commit F上，优点：记录下合并动作；缺点：很多时候这种合并动作是垃圾信息，记录意义不大，反而把历史树搞得复杂不直观，会对实际工作带来负面作用。\n如果先做一次rebase。git pull --rebase，那么本地分支就会被更新成A-B-E-C'-D'，把C-D的基从B上变到E上，这时再去push，那服务器上也变成A-B-E-C'-D'. 那tag打在D'上就行了。目标分支上的历史树还是一条线"),e("br"),t._v(" "),e("strong",[t._v("git rebase过程相比较git merge合并整合得到的结果没有任何区别，但是通过git rebase衍合能产生一个更为整洁的提交历史。")])]),t._v(" "),e("h2",{attrs:{id:"工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),e("h2",{attrs:{id:"一、首先确认环境"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、首先确认环境"}},[t._v("#")]),t._v(" 一、首先确认环境")]),t._v(" "),e("ul",[e("li",[t._v("每次操作前，确认本地环境是否干净？")]),t._v(" "),e("li",[t._v("是否有未提交内容？")]),t._v(" "),e("li",[t._v("是否有未添加内容？\ngit status\n红色：未添加\n黄色：未提交本地分支\n出现：nothing to commit, working tree clean 视为可操作环境")])]),t._v(" "),e("h2",{attrs:{id:"二、准备开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、准备开发"}},[t._v("#")]),t._v(" 二、准备开发")]),t._v(" "),e("h3",{attrs:{id:"步骤："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤："}},[t._v("#")]),t._v(" 步骤：")]),t._v(" "),e("ol",[e("li",[t._v("基于最新master新建本地工作分支")]),t._v(" "),e("li",[t._v("将本地分支推送到远端分支")])]),t._v(" "),e("h3",{attrs:{id:"命令："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令："}},[t._v("#")]),t._v(" 命令：")]),t._v(" "),e("ol",[e("li",[t._v("git checkout -b <本地分支> origin/<远程分支>    \n  例：git checkout -b feature-bugfixes origin/master\n  说明：基于远端 master 新建 feature-bugfixes 分支，feature-bugfixes 为本地开发分支")]),t._v(" "),e("li",[t._v("git push origin <本地分支>:<远程分支>\n例：git push origin feature-bugfixes:feature-bugfixes\n说明：将本地 feature-bugfixes 分支推送到远端 feature-bugfixes 分支\n备注：\n"),e("strong",[t._v("分支命名遵循feature-xxx，jira-0000，hotfix-0000等格式")])])]),t._v(" "),e("h2",{attrs:{id:"三、代码提交与推送"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、代码提交与推送"}},[t._v("#")]),t._v(" 三、代码提交与推送")]),t._v(" "),e("h3",{attrs:{id:"步骤：-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#步骤：-2"}},[t._v("#")]),t._v(" 步骤：")]),t._v(" "),e("ol",[e("li",[t._v("将新增文件添加到版本库")]),t._v(" "),e("li",[t._v("修改代码后，提交到本地")]),t._v(" "),e("li",[t._v("将本地分支同步到远端分支")])]),t._v(" "),e("h3",{attrs:{id:"命令：-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#命令：-2"}},[t._v("#")]),t._v(" 命令：")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("git add <path>")]),t._v(" 或 "),e("code",[t._v("git add .")]),t._v(" 或 "),e("code",[t._v("git add documentation/*.txt")]),t._v("\n例：git add .\n说明：将所有新改动添加到版本控制中")])]),t._v(" "),e("ul",[e("li",[t._v("git add -A 暂存当前git仓库下更高级目录下的所有变化")]),t._v(" "),e("li",[t._v("git add . 暂存当前目录下包括子孙目录的所有文件变化")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v('git commit -m "message"\n例：git commit -m "jira-0000: 修改图片播放顺序"\n说明：将本地修改提交到当前分支，提交信息为：jira-0000: 修改图片播放顺序')]),t._v(" "),e("li",[t._v("git push origin local-branch:origin-branch\n例：git push origin feature-bugfixes:feature-bugfixes\n说明：将本地 feature-bugfixes 分支的修改同步到远端 feature-bugfixes 分支\n备注：\n"),e("strong",[t._v("提交信息格式遵循：jira-xxx: 修改图片播放顺序")])])]),t._v(" "),e("h2",{attrs:{id:"四、代码上线"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、代码上线"}},[t._v("#")]),t._v(" 四、代码上线")]),t._v(" "),e("p",[t._v("代码开发完成，需要把feature分支合并到对应分支进行提测、上线")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("提交环境")]),t._v(" "),e("th",[t._v("git分支")]),t._v(" "),e("th",[t._v("注意事项")])])]),t._v(" "),e("tbody",[e("tr",[e("td",[t._v("测试环境")]),t._v(" "),e("td",[t._v("dev")]),t._v(" "),e("td",[t._v("合并时自己做code-review(尽量避免出现因粗心问题重复提交产生无用节点)")])]),t._v(" "),e("tr",[e("td",[t._v("预发布环境")]),t._v(" "),e("td",[t._v("release")]),t._v(" "),e("td",[t._v("bug全部修改完成，已达到提测条件")])]),t._v(" "),e("tr",[e("td",[t._v("生产环境")]),t._v(" "),e("td",[t._v("master")]),t._v(" "),e("td",[t._v("预发布已无bug，可以上线")])])])]),t._v(" "),e("h3",{attrs:{id:"合并步骤-方法1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并步骤-方法1"}},[t._v("#")]),t._v(" 合并步骤(方法1):")]),t._v(" "),e("ul",[e("li",[t._v("步骤：")])]),t._v(" "),e("ol",[e("li",[t._v("切换至对应的远程分支(dev/release/master)")]),t._v(" "),e("li",[t._v("更新远程代码为最新")]),t._v(" "),e("li",[t._v("合并代码分支代码")]),t._v(" "),e("li",[t._v("推送代码")])]),t._v(" "),e("ul",[e("li",[t._v("示例：")])]),t._v(" "),e("ol",[e("li",[t._v("git checkout dev //切换分支到dev")]),t._v(" "),e("li",[t._v("git pull origin dev")]),t._v(" "),e("li",[t._v("git merge origin/feature")]),t._v(" "),e("li",[t._v("git push origin dev")])]),t._v(" "),e("h3",{attrs:{id:"合并步骤-方法2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#合并步骤-方法2"}},[t._v("#")]),t._v(" 合并步骤(方法2):")]),t._v(" "),e("ol",[e("li",[t._v("登录 "),e("a",{attrs:{href:"http://gitlab.fenqi.d.xiaonei.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("gitlab"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("选择项目 -> 选择 Merge Requests -> 点击 New Merge Requests")]),t._v(" "),e("li",[t._v("Source branch 选择 feature 开发分支")]),t._v(" "),e("li",[t._v("Target branch 选择对应环境分支")]),t._v(" "),e("li",[t._v("点击 Compare branches 提交 merge 请求")])]),t._v(" "),e("h2",{attrs:{id:"五、总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、总结"}},[t._v("#")]),t._v(" 五、总结")]),t._v(" "),e("p",[t._v("工作流程基本只操作各自feature-xxx功能分支，合并feature-xxx分支至dev\n"),e("strong",[t._v("避免直接修改")]),t._v("三个主干分支 master、release、dev,需求迭代使用merge方式推动节点更新")]),t._v(" "),e("h2",{attrs:{id:"需求版本操作流程示例整合-假设需求版本为v1-1"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#需求版本操作流程示例整合-假设需求版本为v1-1"}},[t._v("#")]),t._v(" 需求版本操作流程示例整合(假设需求版本为v1.1)")]),t._v(" "),e("ul",[e("li",[t._v("准备开发")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master //拉取最新master分支 \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b feature-v1.1 origin/master //基于远端master创建本地feature-v1.1分支\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature-v1.1:feature-v1.1 //推送本地feature-v1.1至远端\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("多人协作-任务分工")]),t._v(" 如遇到多人（小明、小红）同时开发v1.1版本，小明首先创建好远端的v1.1分支，小红基于v1.1分支拉取自己维护的分支feature-v1.1red，小明基于v1.1开发")])]),t._v(" "),e("ul",[e("li",[t._v("代码存档")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"feature-v1.1: 新增轮播图功能"')]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature-v1.1:feature-v1.1 //本地版本库推送至远程feature-v1.1 \n")])])]),e("ul",[e("li",[t._v("发布(提测/预发布/生产)")])]),t._v(" "),e("div",{staticClass:"language-bash extra-class"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[t._v("方式一：基于"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dev/release/master"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("分支操作\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout master \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" pull origin master //确保当前master为最新节点 \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" merge origin/feature-v1.1 //合并远程feature-v1.1到当前分支"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("需确保当前版本feature已push到远程"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git merge --no-ff origin/feature-v1.1 //保留分支的commit历史 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git merge --squash origin/feature-v1.1 //把多次分支commit历史压缩为一次 ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#如多人同时修改可能出现冲突(解决冲突后执行 git add . ) ")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feature 轮播图需求上线'")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin HEAD:master \n方式二：基于feature分支操作"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("需确保当前feature没有push到远程版本库，commit之后未执行push操作"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout feature-v1.1 //切换分支到feature-v1.1 \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" rebase origin/master //将远程的master分支变基至当前节点 \n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin feature-v1.1:master \n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#git rebase过程相比较git merge合并整合得到的结果没有任何区别，但是通过git rebase衍合能产生一个更为整洁的提交历史。 ")]),t._v("\n")])])]),e("blockquote",[e("p",[e("strong",[t._v("多人协作-功能开发完成")]),t._v(" 小红首先将自己维护的分支feature-v1.1red合并至小明维护的v1.1分支，小明整合代码内容为功能完善的v1.1版本代码，再执行合并至远端dev/release/master操作")])])])}),[],!1,null,null,null);a.default=r.exports}}]);